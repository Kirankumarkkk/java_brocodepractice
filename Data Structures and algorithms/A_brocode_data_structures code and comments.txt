// data structures - like array to store related data

// algorithm - series of steps to solve a problem

// stack data structures  - LIFO data structures last in first-out
// stores objects into a sort of "vertical tower" , push() to add to the top and pop() to remove from the top

//* stack main program ---------------------------------------

package datastructures.Stack;

import java.util.Stack;

public class StackMainclass {
    public static void main(String[] args) {

        Stack<String> stack= new Stack<String>();

        stack.push("apple");
        stack.push("mango");
        stack.push("orange");
        stack.push("pineapple");

        System.out.println(stack.peek());    //to print last added item

        String removelastitem=stack.pop();   //to remove last added item from stack
        System.out.println(removelastitem);


        System.out.println(stack.search("orange"));   //to check item in the stack position
        System.out.println(stack.search("berry"));  //if any item is not present in stack it will give -1
        System.out.println(stack.empty()); //to check stack is empty or not

        System.out.println(stack);   //to print stack list

    }
}

//*-------------------------------------------------------------------------------------------

//* Queue Data structures


// queue - FIFO data structure - First in first out , a collection designed for holding elements prior to processing linear data structure

//add -enqueue , offer()   and remove- dequeue, poll()

//Queue= linkedList since queue is template, we need to use parent class

/uses in keyboard buffer, printer queue

//*Main class

package datastructures.Queue;

import java.util.LinkedList;
import java.util.Queue;

public class QueueMainclass {
    public static void main(String[] args) {

        Queue<String> queue=new LinkedList<String>();   //LinkedList class utilises the queue

        queue.offer("apple");  //add to the queue
        queue.offer("mango");
        queue.offer("orange");
        System.out.println(queue);
        String removeitem=queue.poll(); //remove first item from the queue
        System.out.println(removeitem);
        System.out.println(queue);
        System.out.println(queue.peek());  //to see first item from the queue
        System.out.println(queue.isEmpty()); //to check queue is empty or not
        System.out.println(queue.size()); //to check the size of queue
        System.out.println(queue.contains("orange"));  //to check whether item present in queue or not true or false
    }
}

//*-------------------------------------------------------------------------------

//* priority queue -FIFO


// Priority queue data structures - a FIFO data structure that serves elements with the highest priorities first before elements with lower priority

//PriorityQueue<(Collections.reverseOrder())> for highest to lowest , PriorityQueue<>() for lowest to highest


//* priorityqueuemain

package datastructures.priorityqueue;


import java.util.Collections;
import java.util.PriorityQueue;
import java.util.Queue;

public class priorityqueuemain {
    public static void main(String[] args) {

        //for string or double it will work low to high
        Queue<Double> queue1=new PriorityQueue<>();

        queue1.offer(2.0);
        queue1.offer(3.0);
        queue1.offer(5.0);
        queue1.offer(1.0);

        while (!queue1.isEmpty()){
            System.out.println(queue1.poll());     //remove last element
        }

        Queue<String> queue2=new PriorityQueue<>(Collections.reverseOrder());
        //for string or double it will work high to low

        queue2.offer("B");
        queue2.offer("D");
        queue2.offer("C");
        queue2.offer("A");

        while (!queue2.isEmpty()){
            System.out.println(queue2.poll());
        }
    }
}


//*-------------------------------------------------------------------------------------------------------


