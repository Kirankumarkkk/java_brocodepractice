//*************************************************************

// java abstraction main class *****************************

public class abstractionclassjava {
    public static void main(String[] args) {

        // since vehicle class is abstract class , it cannot instantiated - new object cannot create
        // public abstract class classname for class
        // abstract void methodname()
        // in the parent class abstract method , we cannot add action, we need to add in child class

        //abstractionclassvehicle abstractionclassvehicle=new abstractionclassvehicle() ;


        abstractionclasscar abstractionclasscar=new abstractionclasscar();

        abstractionclasscar.go();
        abstractionclasscar.stop();
    }
}

//** abstraction abstractionclassvehicle child class

public abstract class abstractionclassvehicle {

    abstract void go();
    abstract void stop();
}

//** child class abstractionclasscar

public class abstractionclasscar extends abstractionclassvehicle{
    @Override
    void go() {
        System.out.println("vehicle is going");
    }

    @Override
    void stop() {
        System.out.println("vehicle is not going");
    }
}

//************************************************************************************

//java access modifier (public,protected,private)

//creating 2 packages and create 2 class in each packages

//no modifier eg defaultMessage String variable if we try to access from another class it won't work
// it can be accessible in the same packages , if we tried to access from it will not show the variables

// if String stringname="variable" this can be accessible only in the same package
// if public String stringname="variable" this can be accessible from another class/another packages as well.

//*******************************************
public: visible in all classes in all packages
protected: visible to all classes in the same package or classes in other packages that are a subclass
default: visible to all classes in the same package
private: visible only in the same class
//*******************************************

// create 2 packages , in package 1 classA and classB , in package 2 classC and classAsub

//*********************************************
// classA

package accessmodifierpackage1;
import accessmodifierpackage2.*;

public class classA {

    protected String protectedMessage="protected Message";

    public static void main(String[] args) {

        classC classC=new classC();
        System.out.println(classC.publicMessage);
        System.out.println(classC.package2message);

        classB classb=new classB();
        //System.out.println(classb.privateMessage);
        //since above message is private it's only accessiable from the same class
        System.out.println(classb.defaultmessage1);

    }
}

//** classB

package accessmodifierpackage1;
import accessmodifierpackage2.*;

public class classB {
    private String privateMessage="This is private Message";
    String defaultmessage1="this message from classB";
}

//** classC

package accessmodifierpackage2;
import accessmodifierpackage1.*;

public class classC {
    public String publicMessage="this is public message";
    String defaultMessage="hello default message from classC package 2";
    public String package2message="package2 message";

}

//** classAsub

package accessmodifierpackage2;
import accessmodifierpackage1.*;

public class classAsub extends classA {

    public static void main(String[] args) {

        classC classC=new classC();
        System.out.println(classC.defaultMessage);

        classAsub classasub=new classAsub();

        System.out.println(classasub.protectedMessage);
    }
}

//********************************************************************

//********java encapsulation

//encapsulation - when variables are set to private in the class,
 // can be acessiable , only using getter method and setter method , we can access private variables

//*************encapsulationMainclass

package encapsulationpackage;

public class encapsulationMainclass {
    public static void main(String[] args) {

        encapsulationCarclass encapsulationcar=new encapsulationCarclass("BMW",2024);
        System.out.println(encapsulationcar.getName());
        System.out.println(encapsulationcar.getYear());

        encapsulationcar.setName("Audi");
        System.out.println(encapsulationcar.getName());

        encapsulationcar.setYear(2025);
        System.out.println(encapsulationcar.getYear());

    }
}

//********encapsulationCarclass

package encapsulationpackage;

public class encapsulationCarclass {
    private String name;
    private int year;
    encapsulationCarclass(String name,int year){
        this.setName(name);
        this.setYear(year);
    }
    public String getName(){
        return name;
    }
    public int getYear(){
        return year;
    }

    public void setName(String name){
        this.name=name;
    }

    public void setYear(int year){
        this.year=year;
    }
}

//** java copy objects
// create new object and in constructor add one more constructor for copy and add copy method

// **encapsulationmainclass

package encapsulationpackage;

public class encapsulationMainclass {
    public static void main(String[] args) {

        encapsulationCarclass encapsulationcar=new encapsulationCarclass("BMW",2024);
        System.out.println(encapsulationcar.getName());
        System.out.println(encapsulationcar.getYear());

        encapsulationcar.setName("Audi");
        System.out.println(encapsulationcar.getName());

        encapsulationcar.setYear(2025);
        System.out.println(encapsulationcar.getYear());

        encapsulationCarclass encapsulationcar1=new encapsulationCarclass("FORD",2024);
        encapsulationCarclass encapsulationcar2=new encapsulationCarclass(encapsulationcar1);

        System.out.println(encapsulationcar1);
        System.out.println(encapsulationcar2);
        System.out.println();
        System.out.println(encapsulationcar1.getName());
        System.out.println(encapsulationcar1.getYear());
        System.out.println();
        System.out.println(encapsulationcar2.getName());
        System.out.println(encapsulationcar2.getYear());

    }
}

//** encapsultioncarclass
package encapsulationpackage;

public class encapsulationCarclass {
    private String name;
    private int year;
    encapsulationCarclass(String name,int year){
        this.setName(name);
        this.setYear(year);
    }
    encapsulationCarclass(encapsulationCarclass x){
        this.copy(x);
    }
    public String getName(){
        return name;
    }
    public int getYear(){
        return year;
    }

    public void setName(String name){
        this.name=name;
    }

    public void setYear(int year){
        this.year=year;
    }

    public void copy(encapsulationCarclass x){
        this.setName(x.getName());
        this.setYear(x.getYear());
    }
}

//**java interface - template for methods/action using implements interfacename1,interfacename2
// we can use interface and override the method in class of implements
// in the interface class only void methodname(); only present

//*interfacemain class

package javainterface;

public class interfacemain {

    public static void main(String[] args) {

        rabbit rabbit1=new rabbit();
        rabbit1.notcruel();
        rabbit1.cruel();
    }
}

//* prey

package javainterface;

public interface prey {

    void notcruel();
}

// predator

package javainterface;

public interface predator {

    void cruel();
}

// rabbit

package javainterface;

public class rabbit implements prey,predator {

    public void notcruel(){
        System.out.println("Rabbit is not cruel");
    }

    public void cruel(){
        System.out.println("Hawk is cruel");
    }


}


//** java polymorphism - poly-many morph -form , ability of object to identify as more than one type

//* 2 class extends vehicle and new 2 objects as object stored and using for loop

//*polymorphismmain

package polymorphismjava;

public class polymorphismmain {

    public static void main(String[] args) {

        polymorphismcar car1=new polymorphismcar();
        polymorphismbycyle bycycle1=new polymorphismbycyle();

        polymorphismvehicle[] vehicle1={car1,bycycle1};

        for (polymorphismvehicle x : vehicle1){
            x.go();
        }
    }
}

//polymorphismvehicle

package polymorphismjava;

public class polymorphismvehicle {

    public void go(){
    }
}

//polymorphismcar

package polymorphismjava;

public class polymorphismcar extends polymorphismvehicle{

    public void go(){
        System.out.println("car is moving");
    }
}

//polymorphismbycyle

package polymorphismjava;

  public class polymorphismbycyle extends  polymorphismvehicle{
      public void go(){
          System.out.println("Bycycle is moving");
      }
  }

//** dynamic polymorphism - dynamic- after compilation - during runtime
// 1= cat , 2=dog , animal eg


package polymorphismjava;

import java.util.Scanner;

public class dynamicpolymorphismMain {
    public static void main(String[] args) {
        Scanner scanner1=new Scanner(System.in);
        dynamicpolymorphismAnimal Animal;

        System.out.println("what animal do you want?");
        System.out.println("1=cat and 2=dog");
        int choice=scanner1.nextInt();

        if (choice==1){
            Animal= new dynamicpolymorphismCat();
            Animal.speak();
        } else if (choice==2) {
            Animal=new dynamicpolymorphismDog();
            Animal.speak();

        }
        else {
            Animal=new dynamicpolymorphismAnimal();
            Animal.speak();
        }


    }
}

//* dynamicpolymorphismAnimal

package polymorphismjava;

public class dynamicpolymorphismAnimal {

    public void speak(){
        System.out.println("Enter value is invalid");
    }
}

//* polymorphismjava

package polymorphismjava;

public class dynamicpolymorphismCat extends dynamicpolymorphismAnimal{

    public void speak(){
        System.out.println("Cat says MEOW MEOW");
    }

}

//* dynamicpolymorphismDog

package polymorphismjava;

public class dynamicpolymorphismDog extends dynamicpolymorphismAnimal {

    public void speak(){
        System.out.println("Dog Barks Barks BOW BOW");
    }
}

//*************** Exception handling if we expect error use try{} catch(error e) finally{}

//* exceptionHandlingMain

package exceptionHandling;

import java.util.Scanner;

public class exceptionHandlingMain {
    public static void main(String[] args) {
        Scanner scanner1=new Scanner(System.in);

        try {
            System.out.println("Enter a number to divide: ");
            int x = scanner1.nextInt();
            System.out.println("Enter a number to divide by: ");
            int y = scanner1.nextInt();
            int z = x / y;
            System.out.println("z value is " + z);
        }
        catch(Exception e){
            System.out.println("We can divide by zero");
        }

        finally {
            scanner1.close();
            System.out.println("this will print always");
        }
    }
}

//***** java File class to check file present or not, get path and delete
// filename.txt with extension also can give and make sure file present in the project if we are giving file name

//* fileClassMain

package FileClass;

import java.io.File;

public class fileClassMain {

    public static void main(String[] args) {

        File file1=new File("C:\\Users\\a921731\\Desktop\\JAVA files\\firstProject\\src\\A_brocode_practice code and comments.txt");

        if(file1.exists()){

            System.out.println("File present");
            System.out.println(file1.getPath());
            System.out.println(file1.getAbsolutePath());
            System.out.println(file1.isFile());
            //file1.delete();
            //above code will delete the file
        }
        else {
            System.out.println("File doesn't exist");
        }
    }

}

//* FileWriter write - create new file and text in the file

// ** fileClassMain look for writer

package FileClass;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class fileClassMain {

    public static void main(String[] args) {

        File file1=new File("C:\\Users\\a921731\\Desktop\\JAVA files\\firstProject\\src\\A_brocode_practice code and comments.txt");

        if(file1.exists()){

            System.out.println("File present");
            System.out.println(file1.getPath());
            System.out.println(file1.getAbsolutePath());
            System.out.println(file1.isFile());
            //file1.delete();
            //above code will delete the file
        }
        else {
            System.out.println("File doesn't exist");
        }

        try{
            FileWriter writer1=new FileWriter("poem.txt");
            writer1.write("Roses are red\nviolets are blue");
            writer1.append("\nThis is the end");
            writer1.close();

        }
        catch (IOException e){
            e.printStackTrace();
        }

    }

}

//* File Reader

	// FileReader = read the contents of a file as a stream of characters. One by one
		//				read() returns an int value which contains the byte value
		//				when read() returns -1, there is no more data to be read

package FileClass;
import java.io.FileReader;
import java.io.*;

public class FileReaderMain {
    public static void main(String[] args) {
        try {
            FileReader reader = new FileReader("art.txt");
            int data = reader.read();
            while(data != -1) {
                System.out.print((char)data);
                data = reader.read();
            }
            reader.close();

        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }
}

// ** GUI java dialogue box open with color and all

package GUIjava;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

public class GUIjavaMain {
    public static void main(String[] args) {

        // JFrame = a GUI window to add components to

        JFrame frame = new JFrame(); //creates a frame
        frame.setTitle("JFrame title goes here"); //sets title of frame
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //exit from application
        frame.setResizable(false); //prevent frame from being resized
        frame.setSize(420,420); //sets the x-dimension, and y-dimension of frame
        frame.setVisible(true); //make frame visible

        ImageIcon image = new ImageIcon("supermariologo.png"); //create an ImageIcon
        frame.setIconImage(image.getImage()); //change icon of frame
        frame.getContentPane().setBackground(new Color(123,50,250)); //change color of background

    }
}

//*****GUI class calling from another class

// **** main class GUIMain

package GUIjava;
import javax.swing.JFrame;
public class GUIMain {

    public static void main(String[] args) {
        myFrame myFrame=new myFrame();
    }
}

// **myFrame

package GUIjava;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

public class myFrame extends JFrame {

        // JFrame = a GUI window to add components to
        myFrame() {
            //JFrame frame = new JFrame(); //creates a frame
            this.setTitle("JFrame title goes here"); //sets title of frame
            this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //exit from application
            this.setResizable(false); //prevent frame from being resized
            this.setSize(420, 420); //sets the x-dimension, and y-dimension of frame
            this.setVisible(true); //make frame visible

            ImageIcon image = new ImageIcon("supermariologo.png"); //create an ImageIcon
            this.setIconImage(image.getImage()); //change icon of frame
            this.getContentPane().setBackground(new Color(123, 50, 250)); //change color of background
        }

}

//**


